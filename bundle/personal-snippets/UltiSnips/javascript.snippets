# Test Frameworks
snippet des "describe(...)" m
describe('$0', () => {
});
endsnippet

snippet edes "describe(element, ...)" m
describe('$1$0', () => {
  let ${2:elementName};

  beforeEach(() => {
    $2 = ${3:parentName}.props.children$4;
  });

  it('should have the correct type and className', () => {
    expect($2.type).toBe('${5:childType}');
    expect($2.props.className).toBe('${1:elementClass}');
  });
});
endsnippet

snippet rdes "describe(React Component, ...)" m
describe('$1$0', () => {
  let ${2:elementName};

  beforeEach(() => {
    $2 = ${3:parentName}.props.children$4;
  });

  it('should have the correct type$5', () => {
    expect($2.type).toBe(${1:elementClass});
  });
});
endsnippet

snippet it "it(...)" m
it('$1', () => {
  $0
});
endsnippet

snippet test "test(...)" m
test('$1', () => {
  $0
});
endsnippet

snippet bef "beforeEach(...)" m
beforeEach(() => {
  $0
});
endsnippet

snippet inj "beforeEach(inject(...))" m
let $1;

beforeEach(inject((_${1:Service}_) => {
  $1 = _$1_;
  stubApiModelGet($1);
}));
endsnippet

snippet aft "afterEach(...)" m
afterEach(() => {
  $0
});
endsnippet

snippet cspy "jasmine.createSpy(...)" m
${1:name}: jasmine.createSpy('$1')
endsnippet

snippet spy "spyOn(...)" m
spyOn($1, '$2');
endsnippet

# React
snippet freact "React Functional Component" m
import React from 'react';

const ${1:name} = (props) => $0

$1.propTypes = {
};

export default $1;
endsnippet

snippet creact "React Class Component" m
import React from 'react';

const ${1:name} = React.createClass({
  propTypes: {
  },

  render() {
    $0
  }
});

export default $1;
endsnippet

snippet sreact "React Stubbed Component" m
import React from 'react';

const ${1:name} = () => false;

export default $1;
endsnippet

snippet reactSpec "React Component Spec" m
import React from 'react';

import $1 from '${2:directory}/$1';

import { stubApiModelGet } from 'model-helpers';
import { shallowRender } from 'react-helpers';

describe('${1:name}', () => {
  let properties;

  beforeEach(() => {
    properties = {
    };
  });

  afterEach(() => {
    properties = null;
  });

  function render() {
    return shallowRender(<$1 { ...properties } />);
  }

  describe('render', () => {
    $0
  });
});
endsnippet

# HTML
snippet div "<div></div>"
<div className="$0">
</div>
endsnippet
